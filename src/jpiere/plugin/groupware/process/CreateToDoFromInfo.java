package jpiere.plugin.groupware.process;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.logging.Level;

import org.adempiere.webui.apps.AEnv;
import org.adempiere.webui.panel.ADForm;
import org.adempiere.webui.session.SessionManager;
import org.compiere.model.MInfoWindow;
import org.compiere.model.MRequestType;
import org.compiere.model.MResource;
import org.compiere.model.MTable;
import org.compiere.model.PO;
import org.compiere.model.Query;
import org.compiere.model.X_R_Request;
import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.compiere.util.Msg;

import com.google.gson.JsonObject;

import jpiere.plugin.groupware.form.ToDoCalendar;
import jpiere.plugin.groupware.model.MToDo;

public class CreateToDoFromInfo extends SvrProcess {

	private String tableName = "";
	private String whereClause = "";
	private boolean p_isAutoGen = false;
	
	@Override
	protected void prepare() {
		ProcessInfoParameter[] para = getParameter();
		for (int i = 0; i < para.length; i++)
		{
			String name = para[i].getParameterName();
			if (para[i].getParameter() == null)
				;
			else if (name.equals("IsAutoGenerated"))
				p_isAutoGen =  para[i].getParameterAsBoolean();
			else
				log.log(Level.SEVERE, "Unknown Parameter: " + name);
		}
	}

	@Override
	protected String doIt() throws Exception {
		
		
		int startInfoID = getProcessInfo().getAD_InfoWindow_ID();
		if(startInfoID > 0) {
			MInfoWindow infoWindow = MInfoWindow.get(startInfoID, get_TrxName());
			tableName = infoWindow.getAD_Table().getTableName();
		}
		else {
			tableName = MTable.getTableName(getCtx(), getTable_ID());
			whereClause = tableName+"_ID=?";
		}
		
		Query query = new Query(getCtx(), tableName, whereClause, get_TrxName()).setClient_ID();
		if(startInfoID > 0)
			query = query.setOnlySelection(getAD_PInstance_ID());
		else
			query = query.setParameters(getRecord_ID());
		
		int[] listID = query.getIDs();
		if(listID.length >1)
			return "@Error@ Selezionare un solo record per creazione calendario";		
		
		if(p_isAutoGen) {
			createByTable(tableName, listID[0]);
		}
		else {
			AEnv.executeAsyncDesktopTask(new Runnable() {
				@Override
				public void run() {
					//023de22e-b814-4271-8964-ceff5d5d2420
					int adFormID = DB.getSQLValue(get_TrxName(), "SELECT AD_Form_ID FROM AD_Form WHERE AD_Form_UU=?", "023de22e-b814-4271-8964-ceff5d5d2420"); //ToDo Calendar --- JPIERE-0471:JPPS
					if(adFormID > 0) {
						ADForm form = SessionManager.getAppDesktop().openForm(adFormID);
						ToDoCalendar cal = (ToDoCalendar)form.getICustomForm();
						JsonObject valueParse = new JsonObject();
						valueParse.addProperty("TableName", tableName);
						valueParse.addProperty("RecordID", listID[0]);
						cal.setValuesForCalendar(valueParse);
					}
				}
			});
		}
		
		return "";
	}

	private void createByTable(String tableName, int recordID) {
		MToDo calendar = new MToDo(getCtx(), 0, get_TrxName());
		if(tableName.equals("R_Request")) {
			X_R_Request rRequest = new X_R_Request(getCtx(), recordID, get_TrxName());
			String str_name = "--";
			if(rRequest.get_ValueAsString("DocumentNo")!=null && !rRequest.get_ValueAsString("DocumentNo").isEmpty())
				str_name = rRequest.get_ValueAsString("DocumentNo");
			if(((MRequestType)rRequest.getR_RequestType()).getName()!=null && !((MRequestType)rRequest.getR_RequestType()).getName().isEmpty())
				str_name = ((!str_name.isEmpty())?(str_name+"-"):"").concat(((MRequestType)rRequest.getR_RequestType()).getName());
			calendar.setName(str_name);
			calendar.setDescription(rRequest.getSummary());
			calendar.setC_BPartner_ID(rRequest.get_ValueAsInt("C_BPartner_ID"));
			Timestamp date = rRequest.getStartDate();
			if(date==null)
				date = Timestamp.valueOf((new Timestamp(System.currentTimeMillis()).toLocalDateTime()).plusDays(1));
			BigDecimal qty = BigDecimal.ONE;
			calendar.setQty(qty);
			calendar.setJP_ToDo_ScheduledStartDate(date);
			calendar.setJP_ToDo_ScheduledStartTime(date);
			Timestamp dateTo = Timestamp.valueOf(date.toLocalDateTime().plusHours(qty.longValue()));
			calendar.setJP_ToDo_ScheduledEndDate(dateTo);
			calendar.setJP_ToDo_ScheduledEndTime(dateTo);
			calendar.saveEx();
		}
		else {
			//iDempiereConsulting __24/12/2024 --- Eventuale associazione della Tabella e Documento di Origine diverse da quelle principali
			boolean isLinked = false;
			PO p_modelRecord = (MTable.get(getCtx(), tableName)).getPO(recordID, null);
			if(p_modelRecord.get_ValueAsInt("S_Resource_ID")>0) { 
				calendar.setAD_User_ID(MResource.get(Env.getCtx(), p_modelRecord.get_ValueAsInt("S_Resource_ID")).getAD_User_ID());
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("C_Project_ID")>0) {  //se presente....
				calendar.setC_Project_ID(p_modelRecord.get_ValueAsInt("C_Project_ID"));
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("C_ContactActivity_ID")>0) {  //se presente....
				calendar.setC_ContactActivity_ID(p_modelRecord.get_ValueAsInt("C_ContactActivity_ID"));
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("R_Request_ID")>0) {  //se presente....
				calendar.setR_Request_ID(p_modelRecord.get_ValueAsInt("R_Request_ID"));
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("MP_Maintain_ID")>0) {  //se presente....
				calendar.set_ValueOfColumn("MP_Maintain_ID", p_modelRecord.get_ValueAsInt("MP_Maintain_ID"));
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("MP_OT_ID")>0) {  //se presente....
				calendar.set_ValueOfColumn("MP_OT_ID", p_modelRecord.get_ValueAsInt("MP_OT_ID"));
				isLinked = true;
			}
			if(p_modelRecord.get_ValueAsInt("C_BPartner_ID")>0)
				calendar.setC_BPartner_ID(p_modelRecord.get_ValueAsInt("C_BPartner_ID"));
			//iDempiereConsulting __24/12/2024 --- Eventuale associazione della Tabella e Documento di Origine diverse da quelle principali
			if(!isLinked) {
				calendar.setAD_Table_ID(p_modelRecord.get_Table_ID());
				calendar.setRecord_ID(recordID);
			}
			//iDempiereConsulting __24/12/2024 -------END
			calendar.setJP_ToDo_Type(MToDo.JP_TODO_TYPE_Schedule);
			String name = p_modelRecord.get_ValueAsString("Name");
			if(name.isEmpty())
				name = "--";
			String description = p_modelRecord.get_ValueAsString("Description");
			if(description.isEmpty())
				description = "--";
			String comments = p_modelRecord.get_ValueAsString("Help");
			if(comments.isEmpty())
				comments = "--";
			calendar.setName(name); 
			calendar.setDescription(description);
			//calendar.setComments(comments);
			calendar.set_ValueOfColumn("Help", comments);
			if(p_modelRecord.get_Value("DateStartSchedule")!=null && p_modelRecord.get_Value("Qty")!=null) {
				Timestamp date = (Timestamp) p_modelRecord.get_Value("DateStartSchedule");
				BigDecimal qty = (BigDecimal) p_modelRecord.get_Value("Qty");
				calendar.setQty(qty);
				calendar.setJP_ToDo_ScheduledStartDate(date);
				calendar.setJP_ToDo_ScheduledStartTime(date);
				Timestamp dateTo = Timestamp.valueOf(date.toLocalDateTime().plusHours(qty.longValue()));
				calendar.setJP_ToDo_ScheduledEndDate(dateTo);
				calendar.setJP_ToDo_ScheduledEndTime(dateTo);
			}
			calendar.saveEx();
		}
		String message = Msg.parseTranslation(getCtx(), "@JP_ToDo_ID@ " + calendar.getName()+" @Created@");
		addLog(calendar.getJP_ToDo_ID(), calendar.getJP_ToDo_ScheduledStartDate(), null, message, calendar.get_Table_ID(), calendar.getJP_ToDo_ID());
	}

}
